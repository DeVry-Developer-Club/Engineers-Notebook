@page "/Wiki/List"
@inherits EngineerNotebook.BlazorAdmin.Helpers.BlazorComponent
@inject IDocService _docService
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar

<MudTable Items="@docs" 
          Hover="true" 
          Breakpoint="Breakpoint.Sm" 
          Loading="@_loading" 
          LoadingProgressColor="Color.Info"
          OnRowClick="@((TableRowClickEventArgs<Documentation> args) => _navigationManager.NavigateTo($"/wiki/view/{args.Item.Id}"))">
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Created By</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Created By">@context.CreatedByUserId</MudTd>
        <MudTd>
            <MudButton OnClick="@(() => _navigationManager.NavigateTo($"/wiki/view/{context.Id}"))">View</MudButton>
            <MudButton OnClick="@(()=>Delete(context.Id))" Color="Color.Error">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<Documentation> docs = new();
    bool _loading = true;
    
    protected override async Task OnInitializedAsync()
    {
        docs = await _docService.GetAll();
        base.OnInitialized();
        _loading = false;
    }

    async Task Delete(int id)
    {
        var response = await _docService.Delete(id);
        
        if (string.IsNullOrEmpty(response))
        {
            Console.WriteLine($"Was unable to delete Documentation with ID: {id}");
            _snackbar.Add($"Error", Severity.Error);
            return;
        }

        var doc = docs.FirstOrDefault(x => x.Id == id);
        
        if (doc == null)
        {
            Console.WriteLine($"Could not locate local instance of Documentation with ID: {id}");
            _snackbar.Add($"Unable to locate local Documentation with ID: {id}", Severity.Warning);
            return;
        }

        _snackbar.Add($"Deleted '{doc.Title}'", Severity.Success);
        docs.Remove(doc);
        
        StateHasChanged();
    }
}