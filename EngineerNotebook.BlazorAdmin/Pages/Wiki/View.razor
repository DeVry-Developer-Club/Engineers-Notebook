@page "/Wiki/View/{DocId}"
@inherits EngineerNotebook.BlazorAdmin.Helpers.BlazorComponent
@inject IDocService _docService
@inject ITagService _tagService
@inject NavigationManager _navigationManager

<MudButton OnClick="@ToggleEdit" Color="@Color">@(!_isEditMode ? "Edit" : "View Only")</MudButton>

@if (_isEditMode)
{
    <MudContainer>
        <DocForm Doc="_doc" IsEdit="true" Tags="_tags" OnSave="@OnSave"/>
    </MudContainer>
}
else
{
    <MudPaper Height="100" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Elevation="2" Width="100%" Square="true" Class="mud-theme-info pa-16 ma-2 mt-3">
                <h1>@_doc.Title</h1>
                <p>@_doc.Description</p>    
                @if (_doc.Tags != null)
                {
                    <div class="mt-4">
                        <MudChipSet ReadOnly="true">
                            @for (int i = 0; i < _doc.Tags.Count; i++)
                            {
                                Color chipColor = GetChipColor(i);
                                Tag t = _doc.Tags[i];
                                    
                                <MudChip Text="@t.Name" Color="@chipColor">@t.Name</MudChip>
                            }
                        </MudChipSet>
                    </div>
                }
            </MudPaper>
            <div style="margin-bottom: 16px; padding-bottom: 16px;">
                @(new MarkupString(_doc.Contents))    
            </div>
        </MudContainer>
    </MudPaper>    
}

@code {

    [Parameter]
    public string DocId { get; set; }

    bool _isEditMode = false;
    Documentation _doc = new();
    Tag[] _tags;

    Color Color => _isEditMode ? Color.Tertiary : Color.Success;

    Color[] _colors = new[]
    {
        Color.Primary,
        Color.Secondary,
        Color.Success,
        Color.Warning,
        Color.Dark
    };

    Color GetChipColor(int index)
    {
        return _colors[index % _colors.Length];
    }
    
    void ToggleEdit()
    {
        _isEditMode = !_isEditMode;
    }
    
    void OnSave(string id)
    {
        _isEditMode = false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Doc Id: {DocId}");
        
        if (string.IsNullOrEmpty(DocId))
            _navigationManager.NavigateTo("/");
        
        var docTask = _docService.GetById(int.Parse(DocId));
        var tagTask = _tagService.GetAll();

        await Task.WhenAll(docTask, tagTask);
        
        Console.WriteLine(docTask.Result);
        if (docTask.Result == null)
        {
            _navigationManager.NavigateTo("/");
        }

        _doc = docTask.Result;
        _tags = tagTask.Result?.ToArray();
        base.OnInitialized();
    }

}