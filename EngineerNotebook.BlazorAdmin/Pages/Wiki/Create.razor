@inject ILogger<Create> Logger
@inject IJSRuntime JsRuntime
@inject IDocService DocService
@using EngineerNotebook.Shared.Models.Requests
@inherits Helpers.BlazorComponent
@namespace EngineerNotebook.BlazorAdmin.Pages.Wiki

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="_item" OnValidSubmit="@CreateClick">
                <DataAnnotationsValidator/>
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Create</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                
                <div class="modal-body">
                    @if (_item == null)
                    {
                        <Spinner></Spinner>
                    }
                    else
                    {
                        <div class="container">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="control-label col-md-6">Title</label>
                                    <div class="col-md-12">
                                        <InputText @bind-Value="_item.Title" class="form-control"></InputText>
                                        <ValidationMessage For="() => _item.Title"></ValidationMessage>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label class="control-label col-md-6">Description</label>
                                    <div class="col-md-12">
                                        <InputText @bind-Value="_item.Description" class="form-control"></InputText>
                                        <ValidationMessage For="() => _item.Description"></ValidationMessage>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label class="control-label col-md-6">Contents</label>
                                    
                                    <!--Hookup TinyMCE Editor here !-->
                                    
                                    <div class="col-md-12">
                                        <ValidationMessage For="() => _item.Contents"></ValidationMessage>
                                    </div>
                                </div>                                
                            </div>
                        </div>
                    }
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (_showCreateModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code{

    [Parameter]
    public EventCallback<string> OnSaveClick { get; set; }

    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showCreateModal = false;
    private CreateDocRequest _item = new();

    private async Task CreateClick()
    {
        await DocService.Create(_item);
        await OnSaveClick.InvokeAsync(null);
        await Close();
    }

    public async Task Open()
    {
        Logger.LogInformation("Now loading... /Wiki/Create");

        await new Css(JsRuntime).HideBodyOverflow();

        _item = new CreateDocRequest();

        _modalDisplay = "block;";
        _modalClass = "Show";
        _showCreateModal = true;
        
        StateHasChanged();
    }

    private async Task Close()
    {
        await new Css(JsRuntime).ShowBodyOverflow();
        _modalDisplay = "none";
        _modalClass = "";
        _showCreateModal = false;
    }

}