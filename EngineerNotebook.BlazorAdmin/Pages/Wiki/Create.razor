@page "/wiki/create"

@inject ILogger<Create> Logger
@inject IJSRuntime JsRuntime
@inject IDocService DocService
@using EngineerNotebook.Shared.Models.Requests
@inherits Helpers.BlazorComponent
@namespace EngineerNotebook.BlazorAdmin.Pages.Wiki

<EditForm Model="_item" OnValidSubmit="@CreateClick">
    <DataAnnotationsValidator/>
    @if (_item == null)
    {
        <Spinner></Spinner>
    }
    else
    {
        <div class="form-group">
            <label class="control-label col-md-6">Title</label>
            <div class="col-md-12">
                <InputText @bind-Value="_item.Title" class="form-control"></InputText>
                <ValidationMessage For="() => _item.Title"></ValidationMessage>
            </div>
        </div>
                
        <div class="form-group">
            <label class="control-label col-md-6">Description</label>
            <div class="col-md-12">
                <InputText @bind-Value="_item.Description" class="form-control"></InputText>
                <ValidationMessage For="() => _item.Description"></ValidationMessage>
            </div>
        </div>
                
        <div class="form-group">
            <label class="control-label col-md-6">Contents</label>
            
            <BlazoredTextEditor @ref="ContentEditor">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
                <EditorContent>
                    @(new MarkupString(_item.Contents))
                </EditorContent>
            </BlazoredTextEditor>

            <div class="col-md-12">
                <ValidationMessage For="() => _item.Contents"></ValidationMessage>
            </div>
        </div>                                
    }
    
    <button type="button" class="btn btn-secondary"@onclick="Close">Cancel</button>
    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@if (_showCreateModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code{
    BlazoredTextEditor ContentEditor;
    [Parameter]
    public EventCallback<string> OnSaveClick { get; set; }

    private bool _showCreateModal = false;
    private CreateDocRequest _item = new();
    
    private async Task CreateClick()
    {
        await DocService.Create(_item);
        await OnSaveClick.InvokeAsync(null);
        await Close();
    }

    public async Task Open()
    {
        Logger.LogInformation("Now loading... /Wiki/Create");

        await new Css(JsRuntime).HideBodyOverflow();

        _item = new CreateDocRequest();

        _showCreateModal = true;
        
        StateHasChanged();
    }

    private async Task Close()
    {
        await new Css(JsRuntime).ShowBodyOverflow();
        _showCreateModal = false;
    }

}