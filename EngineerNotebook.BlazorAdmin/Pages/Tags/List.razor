@page "/Tags/List"
@namespace EngineerNotebook.BlazorAdmin.Pages.Tags
@inject NavigationManager _navigationManager
@inject ITagService _tagService
@inject ISnackbar _snackbar
@inject IDialogService _dialogService
@inherits EngineerNotebook.BlazorAdmin.Helpers.BlazorComponent

<MudIconButton Icon="@Icons.Material.Filled.Add"
               OnClick="@CreateTag"
               Color="Color.Primary"/>New

<MudTable Items="@_tags"
          Hover="true"
          Breakpoint="Breakpoint.Sm"
          Loading="@_loading"
          LoadingProgressColor="Color.Info"
          OnRowClick="@((TableRowClickEventArgs<Tag> args) => EditTag(args.Item))">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">
            @GetDisplayName(context.TagType)
        </MudTd>
        <MudTd>
            <MudButton OnClick="() => EditTag(context)">View</MudButton>
            <MudButton OnClick="() => Delete(context.Id)" Color="Color.Error">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<Tag> _tags = new();
    bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _tags = await _tagService.GetAll();
        await base.OnInitializedAsync();
        _loading = false;
    }

    async Task CreateTag()
    {
        var parameters = new DialogParameters();
        parameters.Add("Tag", new Tag());

        var dialog = _dialogService.Show<TagForm>("New Tag", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var tag = result.Data as Tag;
            _tags.Add(tag);
        }
    }

    async Task EditTag(Tag tag)
    {
        Console.WriteLine($"Called");
        var parameters = new DialogParameters();
        parameters.Add("Tag", tag);
        parameters.Add("IsEdit", true);

        var dialog = _dialogService.Show<TagForm>("Edit Tag", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            tag = result.Data as Tag;
        }
    }

    string GetDisplayName(TagType type)
    {
        switch (type)
        {
            case TagType.Phrase:
                return "Phrase";
            case TagType.Prefix:
                return "Prefix";
            default:
                return "Value";
        }
    }

    async Task Delete(int id)
    {
        var response = await _tagService.Delete(id);

        if (string.IsNullOrEmpty(response))
        {
            Console.WriteLine($"Was unable to delete tag with ID: {id}");
            _snackbar.Add("Error", Severity.Error);
            return;
        }

        var tag = _tags.FirstOrDefault(x => x.Id == id);

        if (tag == null)
        {
            Console.WriteLine($"Could not locate local tag instance with ID: {id}");
            _snackbar.Add($"Unable to locate local tag instance with ID: {id}", Severity.Error);
            return;
        }

        _snackbar.Add($"Deleted '{tag.Name}'");
        _tags.Remove(tag);
    }
}